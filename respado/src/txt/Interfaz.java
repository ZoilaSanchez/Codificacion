/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package txt;

//import java.awt.Desktop;
import FinalLogica.contador;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jvnet.hk2.internal.ThreeThirtyResolver;
import pruebasalgoritomoscom.Generartxt;
import pruebasalgoritomoscom.cronometro;

/**
 *
 * @author dell
 */
public class Interfaz extends javax.swing.JFrame {

   
         DefaultListModel modelo = new DefaultListModel();
    Generartxt n;
    JFileChooser x;
     contador yosi ;
               File archivo;
    FileOutputStream salida;
    FileInputStream entrada;
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        
      
         adfasdfds.setText("00"+" : "+"00"+" : "+"00"+" : "+"000");
        this.setLocationRelativeTo(null);
        tiempo.setEnabled(false);
        modelo = new DefaultListModel();
     n= new Generartxt();
     x=new JFileChooser();
      yosi = new contador();
      
      
        //  jList1.setontentAreaFilled(false);
        //jButton2.setOpaque(false);
        //jButton2.setContentAreaFilled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contenido = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        adfasdfds = new javax.swing.JLabel();
        original = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ascii = new javax.swing.JTextArea();
        copia = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        binario = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        asigancion = new javax.swing.JTextArea();
        por = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        tiempo = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1030, 650));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jButton1.setText("Importar todos los txt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, -1, -1));

        jButton2.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jButton2.setText("Descompresión");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 560, -1, -1));

        jLabel2.setFont(new java.awt.Font("Century", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Contenido del TXT seleccionado");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, -1, -1));

        jLabel3.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Asignación de valores binarios a cada carácter");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, -1, -1));

        jLabel4.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 255, 255));
        jLabel4.setText("Cadena comprimida en formato binario");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 270, -1, -1));

        jScrollPane1.setOpaque(false);

        contenido.setEditable(false);
        contenido.setColumns(20);
        contenido.setFont(new java.awt.Font("Ebrima", 0, 24)); // NOI18N
        contenido.setLineWrap(true);
        contenido.setRows(5);
        contenido.setOpaque(false);
        jScrollPane1.setViewportView(contenido);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 470, 260));

        jLabel5.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Cadena comprimida en formato ascii");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 430, -1, -1));

        jLabel6.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Tiempo de compresión");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, -1, -1));

        jLabel7.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Tamaño original");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 470, -1, -1));

        jLabel8.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Tamaño comprimido");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 510, -1, -1));

        jLabel9.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Porcentaje de compresión");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 480, -1, -1));

        adfasdfds.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        adfasdfds.setForeground(new java.awt.Color(255, 255, 255));
        adfasdfds.setText("0");
        getContentPane().add(adfasdfds, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 430, 210, -1));

        original.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        original.setForeground(new java.awt.Color(255, 255, 255));
        original.setText("0");
        getContentPane().add(original, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 470, 230, -1));

        ascii.setEditable(false);
        ascii.setColumns(20);
        ascii.setFont(new java.awt.Font("Ebrima", 0, 18)); // NOI18N
        ascii.setLineWrap(true);
        ascii.setRows(5);
        jScrollPane4.setViewportView(ascii);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 470, 360, 130));

        copia.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        copia.setForeground(new java.awt.Color(255, 255, 255));
        copia.setText("0");
        getContentPane().add(copia, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 510, -1, -1));

        binario.setEditable(false);
        binario.setColumns(20);
        binario.setFont(new java.awt.Font("Ebrima", 0, 14)); // NOI18N
        binario.setLineWrap(true);
        binario.setRows(5);
        jScrollPane3.setViewportView(binario);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 300, 370, 110));

        asigancion.setEditable(false);
        asigancion.setColumns(20);
        asigancion.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        asigancion.setLineWrap(true);
        asigancion.setRows(5);
        jScrollPane2.setViewportView(asigancion);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 70, 370, 180));

        por.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        por.setForeground(new java.awt.Color(255, 255, 255));
        por.setText("0");
        getContentPane().add(por, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 510, -1, -1));

        jButton3.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jButton3.setText("Salir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 560, -1, -1));

        tiempo.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        tiempo.setText("Iniciar la compresión");
        tiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiempoActionPerformed(evt);
            }
        });
        getContentPane().add(tiempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 370, -1, -1));

        jButton5.setFont(new java.awt.Font("Century", 1, 14)); // NOI18N
        jButton5.setText("Menú");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 560, -1, -1));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/txt/fondoa.jpg"))); // NOI18N
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Interfaz2 descompresion = new Interfaz2();
        descompresion.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed
    private FileNameExtensionFilter filter=new FileNameExtensionFilter("Archivos txt ","txt");
    String ruta;
    String cadena_text;
    boolean si_texto=false;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       contenido.setText("");
       binario.setText("");
       ascii.setText("");
       asigancion.setText("");
       
            x.setFileFilter(filter);
            int opcion=x.showOpenDialog(this);
            if(opcion==JFileChooser.APPROVE_OPTION){
                //obtener ruta
                ruta= x.getSelectedFile().toString();
                cadena_text=n.abrir(new File(ruta));
                contenido.setText("\t"+cadena_text);
                tiempo.setEnabled(true);
                si_texto=true;
                
            }
          
            
         
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    String ac="";
    String asgi="";
    public void vales_paragenerartxt(){
           
                 ac=yosi.getTextoGuardo();//aciii
                 asgi=yosi.txts();
                String p="";
                 System.out.println("estddd " +ac);
                  System.out.println("codi "+asgi);
                  if(x.showDialog(null, "Guardar")==JFileChooser.APPROVE_OPTION){
                      archivo=x.getSelectedFile();
                      if(archivo.getName().endsWith("txt")){
                          String documento=ac;
                          for (int i = 0; i < ac.length(); i++) {
                              int xwz=(int)ac.charAt(i);
                              
                              String zzz=Integer.toString(xwz);
                              p+=ac.charAt(i)+"-"+zzz+"-";
                          }
                          String mensaje=guardar(archivo, p);
                          
                          if(mensaje!=null){
                              JOptionPane.showMessageDialog(null, mensaje);
                          }
                      }
                          
                  }
                  if(x.showDialog(null, "Guardar")==JFileChooser.APPROVE_OPTION){
                      archivo=x.getSelectedFile();
                      if(archivo.getName().endsWith("txt")){
                          String documento=asgi;
                       
                          String mensaje=guardar(archivo, documento);
                          
                          if(mensaje!=null){
                              JOptionPane.showMessageDialog(null, mensaje);
                          }
                      }
                          
                  }
                                   
    }
    
    public String guardar(File archivo,String documento){
        String mensaje="";
        try {
            salida=new FileOutputStream(archivo);
            byte[] texto= documento.getBytes();
            salida.write(texto);
            mensaje="Guardado";
            
        } catch (Exception e) {
        }
        return mensaje;
    }
    public void inicios( Thread hilo) throws UnsupportedEncodingException{
            asigancion.setText("");
                    binario.setText("");
                    ascii.setText("");
                 yosi.verificarcantidad(cadena_text,hilo);
                
                 ascii.setText("\t"+yosi.GuardarComprimido(hilo));
                 yosi.txt();
                 asigancion.setText(yosi.enviar_generadortxt());
                 System.out.println(yosi.enviar_generadortxt());
                 System.out.println(yosi.getCadenaRLE());
                 binario.setText("\t"+yosi.getCadenaRLE());
                
                 
                 byte[] bytes = yosi.getCadenaRLE().getBytes("UTF-8");
                 int sizeInBytes = bytes.length;
                 byte[] bytez = cadena_text.getBytes("UTF-8");
                 int sizeInByte = bytez.length;
                 
                 original.setText(Integer.toString(sizeInByte));

                 copia.setText(Integer.toString(sizeInBytes));
                
                 
                 por.setText(Integer.toString(sizeInBytes*100/sizeInByte)+" % ");
                 
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String[] options = {"Reiniciar", "Salir"};
        int seleccion = JOptionPane.showOptionDialog(null, "¿Que Desea realizar?", "Atencion", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

        if (seleccion == 0) {
            dispose();
            main(null);
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    private  int mili=0;
  private  int seg=0;
  private  int min=0;
  private  int hor=0;
  private  boolean estado=false;
    cronometro reloj=new cronometro();
    
    
    private void tiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiempoActionPerformed
       
            tiempo.setEnabled(true);
            binario.setText("");
        ascii.setText("");
        asigancion.setText("");
        binario.setText("");
        estado=true;
         mili=0;
         seg=0;
         min=0;
         hor=0;
         tiempo.setEnabled(false);
     
         
        Thread hilo=new Thread(){
           
           public void run(){
             for(;;){//no deje de imprimir  significan los ;;
                 
                                 
                 if(estado==true){
                     try {
                         sleep(1); //corra cada segundo
                         if(mili>=1000){
                             mili=0;
                             seg++;
                         }
                         if(seg>=60){
                             mili=0;
                             seg=0;
                             min++;
                         }
                         if(min>=60){
                             mili=0;
                             seg=0;
                             min=0;
                             hor++;
                         }
                         
                          adfasdfds.setText(hor+" : "+min+" : "+seg+" : "+mili);
                      
                           mili++;
                         
                        
                        
                        
                     } catch (Exception e) {
                     }
                 }else{
                       break;      
                 }
                            
                 }
                      
           
        }
        } ; 
             try {
                 inicios(hilo);
             } catch (UnsupportedEncodingException ex) {
                 Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
             }
       
        //guardar en un txt
         
        vales_paragenerartxt();
        
    }//GEN-LAST:event_tiempoActionPerformed

       
    
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Menú menu = new Menú();
        menu.setVisible(true);
        setVisible(false);
        // todo_el_contenido_del_txt es la varibale que debe enviar a su función para iniciar la compresión
    }//GEN-LAST:event_jButton5ActionPerformed

    public String Lectura_de_equipos(String nombreArchivo) {
        DefaultListModel modelo2 = new DefaultListModel();

        String contenido_del_txt_ya_concatenado = " ";
        File archivo;
        FileReader fr;
        BufferedReader br;
        try {
            archivo = new File(nombreArchivo);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            String linea;
            while ((linea = br.readLine()) != null) {
                //t.setText(linea); 
                System.out.println(linea);
                modelo2.addElement(linea);
                contenido_del_txt_ya_concatenado += linea;
            }
            br.close();
            fr.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERRRO LEYENDO ARCHIVO" + e);
        }
        //este return da todo el contenido del txt en una sola sola varible string
        
        return contenido_del_txt_ya_concatenado;
    }

    private void obtener_todos_los_archivos(File archivo) throws IOException {
        File lista_de_archivos[] = archivo.listFiles();
        if (lista_de_archivos != null) {
            for (int i = 0; i < lista_de_archivos.length; i++) {
                if (lista_de_archivos[i].isDirectory()) {
                    obtener_todos_los_archivos(lista_de_archivos[i]);
                } else {
                    int tamaño = lista_de_archivos[i].getAbsolutePath().length();
                    String extencion = lista_de_archivos[i].getCanonicalPath().substring(tamaño - 3, tamaño);
                    if (extencion.equals("txt")) {
                        modelo.addElement(lista_de_archivos[i].getAbsolutePath());
                        System.out.println("txt: " + lista_de_archivos[i].getAbsolutePath());
                    }
                }
            }
        }
       

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menú.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menú.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menú.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menú.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menú().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adfasdfds;
    private javax.swing.JTextArea ascii;
    private javax.swing.JTextArea asigancion;
    private javax.swing.JTextArea binario;
    private javax.swing.JTextArea contenido;
    private javax.swing.JLabel copia;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel original;
    private javax.swing.JLabel por;
    private javax.swing.JButton tiempo;
    // End of variables declaration//GEN-END:variables
}
